; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	compress
PUBLIC	compress2
PUBLIC	compressBound
PUBLIC	??_C@_05DFCKICEH@1?42?45?$AA@			; `string'
EXTRN	deflate:PROC
EXTRN	deflateEnd:PROC
EXTRN	deflateInit_:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$compress DD imagerel $LN4
	DD	imagerel $LN4+22
	DD	imagerel $unwind$compress
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$compress2 DD imagerel $LN8
	DD	imagerel $LN8+85
	DD	imagerel $unwind$compress2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$compress2 DD imagerel $LN8+85
	DD	imagerel $LN8+144
	DD	imagerel $chain$0$compress2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$compress2 DD imagerel $LN8+144
	DD	imagerel $LN8+163
	DD	imagerel $chain$2$compress2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$compress2 DD imagerel $LN8+163
	DD	imagerel $LN8+172
	DD	imagerel $chain$3$compress2
pdata	ENDS
;	COMDAT ??_C@_05DFCKICEH@1?42?45?$AA@
CONST	SEGMENT
??_C@_05DFCKICEH@1?42?45?$AA@ DB '1.2.5', 00H		; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$compress2 DD 021H
	DD	imagerel $LN8
	DD	imagerel $LN8+85
	DD	imagerel $unwind$compress2
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$compress2 DD 020021H
	DD	0123400H
	DD	imagerel $LN8
	DD	imagerel $LN8+85
	DD	imagerel $unwind$compress2
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$compress2 DD 020821H
	DD	0123408H
	DD	imagerel $LN8
	DD	imagerel $LN8+85
	DD	imagerel $unwind$compress2
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compress2 DD 020b01H
	DD	07004f20bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compress DD 010401H
	DD	06204H
xdata	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\simpleocr\zlib\compress.c
;	COMDAT compressBound
_TEXT	SEGMENT
sourceLen$ = 8
compressBound PROC					; COMDAT

; 78   :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +
; 79   :            (sourceLen >> 25) + 13;

  00000	8b c1		 mov	 eax, ecx
  00002	8b d1		 mov	 edx, ecx
  00004	c1 e8 0e	 shr	 eax, 14
  00007	c1 ea 19	 shr	 edx, 25
  0000a	03 c1		 add	 eax, ecx
  0000c	c1 e9 0c	 shr	 ecx, 12
  0000f	83 c1 0d	 add	 ecx, 13
  00012	03 c2		 add	 eax, edx
  00014	03 c1		 add	 eax, ecx

; 80   : }

  00016	c3		 ret	 0
compressBound ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\simpleocr\zlib\compress.c
;	COMDAT compress2
_TEXT	SEGMENT
stream$ = 32
dest$ = 144
destLen$ = 152
source$ = 160
sourceLen$ = 168
level$ = 176
compress2 PROC						; COMDAT

; 28   : {

$LN8:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	57		 push	 rdi
  00004	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H

; 29   :     z_stream stream;
; 30   :     int err;
; 31   : 
; 32   :     stream.next_in = (Bytef*)source;
; 33   :     stream.avail_in = (uInt)sourceLen;
; 34   : #ifdef MAXSEG_64K
; 35   :     /* Check for source > 64K on 16-bit machine: */
; 36   :     if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;
; 37   : #endif
; 38   :     stream.next_out = dest;
; 39   :     stream.avail_out = (uInt)*destLen;

  0000b	8b 02		 mov	 eax, DWORD PTR [rdx]
  0000d	4d 89 43 98	 mov	 QWORD PTR [r11-104], r8
  00011	45 89 4b a0	 mov	 DWORD PTR [r11-96], r9d
  00015	49 89 4b a8	 mov	 QWORD PTR [r11-88], rcx
  00019	89 44 24 38	 mov	 DWORD PTR stream$[rsp+24], eax

; 40   :     if ((uLong)stream.avail_out != *destLen) return Z_BUF_ERROR;
; 41   : 
; 42   :     stream.zalloc = (alloc_func)0;

  0001d	33 c0		 xor	 eax, eax
  0001f	48 8b fa	 mov	 rdi, rdx

; 43   :     stream.zfree = (free_func)0;
; 44   :     stream.opaque = (voidpf)0;
; 45   : 
; 46   :     err = deflateInit(&stream, level);

  00022	8b 94 24 b0 00
	00 00		 mov	 edx, DWORD PTR level$[rsp]
  00029	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05DFCKICEH@1?42?45?$AA@
  00030	44 8d 48 58	 lea	 r9d, QWORD PTR [rax+88]
  00034	49 8d 4b 98	 lea	 rcx, QWORD PTR [r11-104]
  00038	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  0003c	49 89 43 d0	 mov	 QWORD PTR [r11-48], rax
  00040	49 89 43 d8	 mov	 QWORD PTR [r11-40], rax
  00044	e8 00 00 00 00	 call	 deflateInit_

; 47   :     if (err != Z_OK) return err;

  00049	85 c0		 test	 eax, eax
  0004b	75 56		 jne	 SHORT $LN4@compress2

; 48   : 
; 49   :     err = deflate(&stream, Z_FINISH);

  0004d	8d 50 04	 lea	 edx, QWORD PTR [rax+4]
  00050	48 8d 4c 24 20	 lea	 rcx, QWORD PTR stream$[rsp]
  00055	48 89 9c 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], rbx
  0005d	e8 00 00 00 00	 call	 deflate

; 50   :     if (err != Z_STREAM_END) {
; 51   :         deflateEnd(&stream);

  00062	48 8d 4c 24 20	 lea	 rcx, QWORD PTR stream$[rsp]
  00067	8b d8		 mov	 ebx, eax
  00069	83 f8 01	 cmp	 eax, 1
  0006c	74 22		 je	 SHORT $LN1@compress2
  0006e	e8 00 00 00 00	 call	 deflateEnd

; 52   :         return err == Z_OK ? Z_BUF_ERROR : err;

  00073	b8 fb ff ff ff	 mov	 eax, -5
  00078	85 db		 test	 ebx, ebx
  0007a	0f 44 d8	 cmove	 ebx, eax
  0007d	8b c3		 mov	 eax, ebx
  0007f	48 8b 9c 24 90
	00 00 00	 mov	 rbx, QWORD PTR [rsp+144]

; 57   :     return err;
; 58   : }

  00087	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  0008e	5f		 pop	 rdi
  0008f	c3		 ret	 0
$LN1@compress2:

; 53   :     }
; 54   :     *destLen = stream.total_out;

  00090	8b 44 24 3c	 mov	 eax, DWORD PTR stream$[rsp+28]
  00094	89 07		 mov	 DWORD PTR [rdi], eax

; 55   : 
; 56   :     err = deflateEnd(&stream);

  00096	e8 00 00 00 00	 call	 deflateEnd
  0009b	48 8b 9c 24 90
	00 00 00	 mov	 rbx, QWORD PTR [rsp+144]
$LN4@compress2:

; 57   :     return err;
; 58   : }

  000a3	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  000aa	5f		 pop	 rdi
  000ab	c3		 ret	 0
compress2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\simpleocr\zlib\compress.c
;	COMDAT compress
_TEXT	SEGMENT
dest$ = 64
destLen$ = 72
source$ = 80
sourceLen$ = 88
compress PROC						; COMDAT

; 67   : {

$LN4:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 68   :     return compress2(dest, destLen, source, sourceLen, Z_DEFAULT_COMPRESSION);

  00004	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  0000c	e8 00 00 00 00	 call	 compress2

; 69   : }

  00011	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00015	c3		 ret	 0
compress ENDP
_TEXT	ENDS
END
